<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableComponent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.FocusEvent;
			import flash.events.MouseEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import spark.components.Button;
			import spark.components.TextInput;
			import spark.components.supportClasses.SkinnableComponent;
			
			[SkinPart(required="true")]
			public var btnPrev:Button;
			
			[SkinPart(required="true")]
			public var btnNext:Button;
			
			[SkinPart(required="true")]
			public var btnFirst:Button;
			
			[SkinPart(required="true")]
			public var btnLast:Button;
			
			[SkinPart(required="false")]
			public var currentPageTextInput:TextInput;
			
			private var _totalPage:uint = 1;
			
			private var _currentPage:uint = 1;
			
			[Bindable(event="propertyChange")]
			public function get totalPage() : uint
			{
				return this._totalPage;
			}
			
			private function set _577409037totalPage(param1:uint) : void
			{
				this._totalPage = param1;
				this.updateUI();
			}
			
			[Bindable(event="propertyChange")]
			public function get currentPage() : uint
			{
				return this._currentPage;
			}
			
			private function set _601108392currentPage(param1:uint) : void
			{
				this._currentPage = param1;
				this.dispatchEvent(new Event(Event.CHANGE));
				this.updateUI();
			}
			
			override protected function getCurrentSkinState() : String
			{
				return super.getCurrentSkinState();
			}
			
			override protected function partAdded(param1:String, param2:Object) : void
			{
				super.partAdded(param1,param2);
				if(param2 == this.btnPrev)
				{
					this.btnPrev.addEventListener(MouseEvent.CLICK,this.onPrevBtnClick);
				}
				else if(param2 == this.btnNext)
				{
					this.btnNext.addEventListener(MouseEvent.CLICK,this.onNextBtnClick);
				}
				else if(param2 == this.btnFirst)
				{
					this.btnFirst.addEventListener(MouseEvent.CLICK,this.onFirstBtnClick);
				}
				else if(param2 == this.btnLast)
				{
					this.btnLast.addEventListener(MouseEvent.CLICK,this.onLastBtnClick);
				}
				else if(param2 == this.currentPageTextInput)
				{
					this.currentPageTextInput.addEventListener(FocusEvent.FOCUS_OUT,this.onCurrentPageTextInputValueCommit);
					this.currentPageTextInput.addEventListener(FlexEvent.ENTER,this.onCurrentPageTextInputValueCommit);
				}
				this.updateUI();
			}
			
			override protected function partRemoved(param1:String, param2:Object) : void
			{
				super.partRemoved(param1,param2);
				if(param2 == this.btnPrev)
				{
					this.btnPrev.removeEventListener(MouseEvent.CLICK,this.onPrevBtnClick);
				}
				else if(param2 == this.btnNext)
				{
					this.btnNext.removeEventListener(MouseEvent.CLICK,this.onNextBtnClick);
				}
				else if(param2 == this.btnFirst)
				{
					this.btnFirst.removeEventListener(MouseEvent.CLICK,this.onFirstBtnClick);
				}
				else if(param2 == this.btnLast)
				{
					this.btnLast.removeEventListener(MouseEvent.CLICK,this.onLastBtnClick);
				}
				else if(param2 == this.currentPageTextInput)
				{
					this.currentPageTextInput.removeEventListener(FocusEvent.FOCUS_OUT,this.onCurrentPageTextInputValueCommit);
					this.currentPageTextInput.removeEventListener(FlexEvent.ENTER,this.onCurrentPageTextInputValueCommit);
				}
			}
			
			private function onCurrentPageTextInputValueCommit(param1:Event) : void
			{
				var _loc2_:uint = uint(this.currentPageTextInput.text);
				if(_loc2_ < 1)
				{
					_loc2_ = 1;
				}
				else if(_loc2_ > this._totalPage)
				{
					_loc2_ = this._totalPage;
				}
				this.currentPage = _loc2_;
			}
			
			private function onPrevBtnClick(param1:MouseEvent) : void
			{
				if(this._currentPage > 1)
				{
					--this.currentPage;
				}
			}
			
			private function onNextBtnClick(param1:MouseEvent) : void
			{
				if(this._currentPage < this._totalPage)
				{
					++this.currentPage;
				}
			}
			
			private function onFirstBtnClick(param1:MouseEvent) : void
			{
				if(this._currentPage > 1)
				{
					this.currentPage = 1;
				}
			}
			
			private function onLastBtnClick(param1:MouseEvent) : void
			{
				if(this._currentPage < this._totalPage)
				{
					this.currentPage = this._totalPage;
				}
			}
			
			private function updateUI() : void
			{
				if(this.btnPrev)
				{
					this.btnPrev.enabled = this._currentPage > 1;
				}
				if(this.btnFirst)
				{
					this.btnFirst.enabled = this._currentPage > 1;
				}
				if(this.btnNext)
				{
					this.btnNext.enabled = this._currentPage < this._totalPage;
				}
				if(this.btnLast)
				{
					this.btnLast.enabled = this._currentPage < this._totalPage;
				}
			}
			
			public function set currentPage(param1:uint) : void
			{
				var _loc2_:Object = this.currentPage;
				if(_loc2_ !== param1)
				{
					this._601108392currentPage = param1;
					if(this.hasEventListener("propertyChange"))
					{
						this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this,"currentPage",_loc2_,param1));
					}
				}
			}
			
			public function set totalPage(param1:uint) : void
			{
				var _loc2_:Object = this.totalPage;
				if(_loc2_ !== param1)
				{
					this._577409037totalPage = param1;
					if(this.hasEventListener("propertyChange"))
					{
						this.dispatchEvent(PropertyChangeEvent.createUpdateEvent(this,"totalPage",_loc2_,param1));
					}
				}
			}
		]]>
	</fx:Script>
	
</s:SkinnableComponent>
