<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:cComponents="anifire.creator.components.*"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	styleName="bgTemplateMain"
	styleName.preview="bgTemplatePreviewer">

	<fx:Script>
		<![CDATA[
			import anifire.component.CCThumb;
			import anifire.creator.core.CcConsole;
			import anifire.creator.events.CcCoreEvent;
			import anifire.creator.events.CcPreMadeCharChooserEvent;
			import anifire.creator.events.CcTemplateChooserEvent;
			import anifire.creator.models.CcCharacter;
			import anifire.util.UtilDict;
			import anifire.util.UtilPager;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			
			[Bindable]
			public var _selectedCCChar:CcCharacter = null;
			private var _pager:UtilPager = null;
			[Bindable]
			private var TAB_DATAPROVIDER:ArrayCollection = new ArrayCollection([{
				"label":UtilDict.toDisplay("cc","Create Your Own Characters"),
				"data":{"state":""}
			},{
				"label":UtilDict.toDisplay("cc","Specialties"),
				"data":{"state":"preview_professions"}
			},{
				"label":UtilDict.toDisplay("cc","Celebrities"),
				"data":{"state":"preview_celebrities"}
			}]);
			
			public function sliceTabProvider() : void
			{
				while(this.TAB_DATAPROVIDER.length > 1)
				{
					this.TAB_DATAPROVIDER.removeItemAt(1);
				}
			}
			
			public function get bodyShapeChooser() : anifire.creator.components.BodyShapeChooser
			{
				return this._ce_bodyShapeChooser;
			}
			
			private function normalizeCategory(param1:String) : String
			{
				return param1 == "" ? "celebrities" : param1;
			}
			
			private function initPagerByCategory(param1:String) : void
			{
				var console:CcConsole;
				var filteredData:Array;
				var cat:String = param1;
				this._pager = new UtilPager();
				console = CcConsole.getCcConsole();
				filteredData = console.getTemplateCCPreMadeChars().filter(function(param1:CcCharacter, param2:int, param3:Array):Boolean
				{
					return cat == param1.category || cat == "celebrities" && param1.category == "";
				});
				filteredData.sortOn("createDateTime",Array.DESCENDING);
				this._pager.data = filteredData;
				this._pager.windowSize = 9;
				this.templateSelector.pager = this._pager;
				this.templateSelector.category = cat;
			}
			
			public function init() : void
			{
				var _numCCTotal:int = 0;
				var _numCC:int = 0;
				var _destroyHandler:Boolean = false;
				var _handlerEach:Function = null;
				var _handler:Function = null;
				var _self:anifire.creator.components.BodyShapeMegaChooser = this;
				_numCCTotal = 9999;
				_numCC = 0;
				_destroyHandler = false;
				_handlerEach = function(param1:CcCoreEvent):void
				{
					var _loc2_:Object = param1.getData();
					if(_loc2_.tag != "latest")
					{
						return;
					}
					templates.addThumbnail(_loc2_.thumbnail as CCThumb,_loc2_.char as CcCharacter);
					if(++_numCC == _numCCTotal)
					{
						CcConsole.getCcConsole().removeEventListener(CcCoreEvent.LOAD_CHARACTER_THUMB_COMPLETE,_handlerEach);
						_destroyHandler = true;
					}
				};
				_handler = function(param1:CcCoreEvent):void
				{
					var _loc2_:Object = param1.getData();
					if(_loc2_.tag != "latest")
					{
						return;
					}
					_numCCTotal = int(_loc2_.total);
					if(_numCC == _numCCTotal && !_destroyHandler)
					{
						CcConsole.getCcConsole().removeEventListener(CcCoreEvent.LOAD_CHARACTER_THUMB_COMPLETE,_handlerEach);
					}
					CcConsole.getCcConsole().removeEventListener(CcCoreEvent.LOAD_CHARACTER_THUMB_ALL_COMPLETE,_handler);
					mv.play();
				};
				CcConsole.getCcConsole().addEventListener(CcCoreEvent.LOAD_CHARACTER_THUMB_COMPLETE,_handlerEach);
				CcConsole.getCcConsole().addEventListener(CcCoreEvent.LOAD_CHARACTER_THUMB_ALL_COMPLETE,_handler);
				addEventListener(CcTemplateChooserEvent.USER_WANT_TO_PREVIEW,function(param1:CcTemplateChooserEvent):void
				{
					var _loc2_:CcCharacter = param1.getData() as CcCharacter;
					var _loc3_:String = normalizeCategory(_loc2_.category);
					if(_pager == null || normalizeCategory(templateSelector.category) != _loc3_)
					{
						initPagerByCategory(_loc3_);
					}
					_pager.scrollToItem(_loc2_);
					if(_selectedCCChar == null || (param1.getData() as CcCharacter).assetId != _selectedCCChar.assetId)
					{
						_selectedCCChar = param1.getData() as CcCharacter;
						charPreviewer.initByCcChar(_selectedCCChar,_selectedCCChar.thumbnailActionId);
					}
					templateSelector.dispatchEvent(new CcTemplateChooserEvent(CcTemplateChooserEvent.PREVIEW_CHARACTER_CHANGED,_self,_selectedCCChar));
					_self.currentState = _loc2_.category == "" ? "preview_celebrities" : "preview_" + _loc2_.category;
				});
				this.topTabs.addEventListener(ItemClickEvent.ITEM_CLICK,function(param1:ItemClickEvent):void
				{
					_self.currentState = param1.item.data["state"];
				});
				this.addEventListener(CcTemplateChooserEvent.PREVIEW_TAB_CHANGED,function(param1:CcTemplateChooserEvent):void
				{
					_self.currentState = param1.getData() as String;
				});
			}
			
			private function updatePreviewer(param1:FlexEvent) : void
			{
			}
			
			private function updateCategory(param1:String) : void
			{
				var x:Object;
				var xx:Function = null;
				var cat:String = param1;
				if(this._pager == null || this.normalizeCategory(this.templateSelector.category) != cat)
				{
					this.initPagerByCategory(cat);
				}
				x = {
					"celebrities":2,
					"professions":1
				};
				this.topTabs.selectedIndex = x[cat];
				if(this._selectedCCChar == null)
				{
					var self:anifire.creator.components.BodyShapeMegaChooser = this;
					xx = function(param1:Event):void
					{
						CcConsole.getCcConsole().removeEventListener(CcCoreEvent.LOAD_CHARACTER_THUMB_ALL_COMPLETE,xx);
						var _loc2_:CcCharacter = _pager.getView()[0] as CcCharacter;
						if(_selectedCCChar == null && _loc2_ != null)
						{
							self.dispatchEvent(new CcTemplateChooserEvent(CcTemplateChooserEvent.USER_WANT_TO_PREVIEW,self,_loc2_));
						}
					};
					CcConsole.getCcConsole().addEventListener(CcCoreEvent.LOAD_CHARACTER_THUMB_ALL_COMPLETE,xx);
				}
			}
			
			private function tellEveryBodyUserWantToModify(param1:Event) : void
			{
				var _loc2_:CcPreMadeCharChooserEvent = new CcPreMadeCharChooserEvent(CcPreMadeCharChooserEvent.PRE_MADE_CHAR_CHOSEN,this);
				this._selectedCCChar.markAsTemplate();
				_loc2_.ccCharChosen = this._selectedCCChar.clone();
				_loc2_.ccCharChosen.assetId = "";
				this.dispatchEvent(_loc2_);
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:Move id="mv" yBy="{-mc.height}" target="{mc}"/>
	</fx:Declarations>

	<mx:Canvas width="100%" x="0" y="5" verticalScrollPolicy="off">
		<mx:TabBar
			id="topTabs"
			firstTabStyleName="topButtonTabFirst"
			tabStyleName="topButtonTab"
			horizontalGap="2"
			buttonMode="true"
			dataProvider.preview="{}"
			dataProvider.preview_celebrities=""
			dataProvider.preview_professions=""/>
	</mx:Canvas>

	<mx:ViewStack id="vs" width="100%" height="100%" selectedChild.preview="{previewer}">
		<mx:Canvas horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<cComponents:BodyShapeChooser id="_ce_bodyShapeChooser" x="0" y="38" width="100%" height="235"/>
			<mx:Canvas id="mc" x="3" y="{height}" width="{width - 6}" height="218">
				<cComponents:LatestTemplates id="templates" percentWidth="100" verticalCenter="-20"/>
			</mx:Canvas>
		</mx:Canvas>
		<mx:Canvas
			id="previewer"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off">
			<cComponents:CharPreviewer id="charPreviewer" x="-20" y="65" width="428" height="329"/>
			<cComponents:TemplateCCSelector id="templateSelector" x="450" y="55"/>
			<mx:HBox verticalAlign="middle" horizontalGap="25" y="450" horizontalCenter="-280" visible="{_selectedCCChar != null}">
				<s:Button
					id="btnModify"
					click="tellEveryBodyUserWantToModify(event)"
					styleName="templateCCBtnModify"
					buttonMode="true"
					label="{UtilDict.toDisplay('cc','Modify Me!')}"/>
			</mx:HBox>
		</mx:Canvas>
	</mx:ViewStack>

	<mx:states>
		<s:State name="preview" enterState="updatePreviewer(event)"/>
		<s:State name="preview_celebrities" basedOn="preview" enterState="updateCategory('celebrities')"/>
		<s:State name="preview_professions" basedOn="preview" enterState="updateCategory('professions')"/>
	</mx:states>

</mx:Canvas>
