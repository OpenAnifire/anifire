<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:anifire="anifire.*"
			   xmlns:component="anifire.component.*"
			   xmlns:components="anifire.creator.components.*"
			   width="960" height="600" preinitialize="initApp()" applicationComplete="onApplicationComplete()"
			   backgroundAlpha="0" backgroundColor="0xEDF2F6" creationPolicy="auto"
			   implements="anifire.creator.interfaces.ICcMainUiContainer"
			   >

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace aComponents "anifire.components.*";
		@namespace components "anifire.creator.components.*";

		global
		{
			layoutDirection: "ltr";
		}
		s|Application
		{
			font-size: 13;
		}
		s|HScrollBar
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultHScrollBarSkin");
		}
		s|VScrollBar
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultVScrollBarSkin");
		}
		s|TextBase,
		s|SkinnableTextBase,
		s|RichEditableText
		{
			color: #515969;
			fontStyle: normal;
			fontFamily: "StudioSparkMain";
		}
		s|Label#promptDisplay
		{
			color: #CCCCCC;
			fontStyle: "normal";
		}
		s|RichText#errorTextDisplay
		{
			fontSize: 11;
		}
		s|TextInput
		{
			borderColor: #CACAD4;
			skinClass: ClassReference("anifire.creator.skins.DefaultTextInputSkin");
		}
		s|Button.primary
		{
			skinClass: ClassReference("anifire.creator.skins.PrimaryButtonSkin");
		}
		s|Button.default
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultButtonSkin");
		}
		components|IconButton
		{
			skinClass: ClassReference("anifire.creator.skins.IconButtonSkin");
		}
		aComponents|IconButton.topToolBar
		{
			skinClass: ClassReference("anifire.creator.skins.TopToolBarButtonSkin");
		}
		components|MenuItemList
		{
			skinClass: ClassReference("anifire.creator.skins.MenuItemListSkin");
		}
		components|ColorPicker
		{
			skinClass: ClassReference("anifire.creator.skins.FlatColorPickerSkin");
		}
		components|ArrowTipContainer
		{
			skinClass: ClassReference("anifire.creator.skins.ArrowTipContainerSkin");
		}
		s|DropDownList
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultDropDownListSkin");
		}
		components|ConfirmPopUp
		{
			skinClass: ClassReference("anifire.creator.skins.ConfirmPopUpSkin");
			fontSize: 14;
		}
		s|Panel
		{
			skinClass: ClassReference("anifire.creator.skins.ConfirmPanelSkin");
		}
		
		@font-face {
            src: url("../fonts/files/Lato-Regular.ttf");
            fontFamily: StudioSparkMain;
            embedAsCFF: true;
        }
        @font-face {
            src: url("../fonts/files/Lato-Italic.ttf");
            fontStyle: italic;
            fontFamily: StudioSparkMain;
            embedAsCFF: true;
        }
        @font-face {
            src: url("../fonts/files/Lato-Bold.ttf");
            fontWeight: 700;
            fontFamily: StudioSparkMain;
            embedAsCFF: true;
        }
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import anifire.constant.ServerConstants;
			import anifire.creator.components.BodyShapeChooser;
			import anifire.creator.config.GoAnimate;
			import anifire.creator.core.CcConsole;
			import anifire.creator.events.CcCoreEvent;
			import anifire.managers.AppConfigManager;
			import anifire.util.Util;
			import anifire.util.UtilErrorLogger;
			import anifire.utils.SecurityUtils;

			private var _ccConsole:CcConsole;
			private var _componentInit:Boolean;
			private var _resourceInit:Boolean;

			private function initApp() : void
			{
				SecurityUtils.init();
				AppConfigManager.instance;
				Util.loadClientLocale("go", this.onResourceComplete);
			}

			private function onResourceComplete(param1:Event = null) : void
			{
				// make sure the resources and the application
				// are ready before we get things up and running
				this._resourceInit = true;
				if (this._componentInit) {
					this.initConsole();
				}
			}

			private function onApplicationComplete() : void
			{
				this._componentInit = true;
				if (this._resourceInit) {
					this.initConsole();
				}
			}

			private function initConsole() : void
			{
				CcConsole.setConfiguration(new GoAnimate());
				CcConsole.initializeCcConsole(this, this, this);
				this._ccConsole = CcConsole.getCcConsole();
				this._ccConsole.addEventListener(CcCoreEvent.LOAD_EVERYTHING_COMPLETE, this.loadComplete);
			}
			
			private function loadComplete(param1:Event) : void
			{
				this.setCurrentState("browser");
			}

			private function uncaughtErrorHandler(param1:UncaughtErrorEvent) : void
			{
				UtilErrorLogger.getInstance().fatal("uncaughtErrorHandler: " + new Error().getStackTrace());
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="loading"/>
		<s:State name="browser"/>
		<s:State name="editor"/>
	</s:states>

	<s:Group id="browserView" width="100%" height="100%" visible="false" visible.browser="true" clipAndEnableScrolling="true">
		<components:BodyShapeChooser
			id="_ce_bodyShapeChooser" width="100%" height="100%"/>
	</s:Group>

	<s:Group id="editorView" width="100%" height="100%" visible="false" visible.editor="true" clipAndEnableScrolling="true">		
		<s:Group id="previewer" width="100%" height="100%" visible="false">
			<components:CharPreviewer
				id="charPreview" width="300" height="200" scaleX="1.5" scaleY="1.5" clipContent="false"
				horizontalCenter="0" verticalCenter="20"/>
		</s:Group>

		<s:HGroup id="slidingPanel" width="675" height="600" styleName="bgCharEditor">
			<s:VGroup id="componentPanel" top="68" left="0" width="625" height="532">
				<components:TypeChooserSpark
					id="componentTypeChooser" left="4" top="0" width="100%" height="68"/>
				<s:HGroup id="componentSettings" width="100%" height="100%">
					<s:Group id="componentChooser">
						<components:ComponentThumbChooserSpark
							id="componentThumbChooser" biggerHeight="532" width="100%" height="532"
							smallerHeight="{532 - _ce_selectedDecoration.height}"/>
						<components:ClothesChooser
							id="lothesChooser" y="10" width="100%" height="250" visible="false"
							clipContent="false" thumbChooserWidth="463" biggerHeight="70" smallerHeight="70"
							creationPolicy="all" verticalGap="50"/>
						<components:DecorationPanel id="_ce_selectedDecoration" left="0" bottom="0" width="654" height="90"/>
						<components:ScaleChooserSpark id="_ce_charScaleChooser" bottom="0" right="0"/>
					</s:Group>
					<s:VGroup id="componentTuner">
						<components:CcColorPickers
							id="colorPicker" bottom="10" right="45" width="248" height="62"
							biggerElementWidth="248" smallerElementWidth="248"/>
						<components:CcComponentPropertyInspectorSpark
							id="propertyInspector" bottom="0" right="0"/>
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
			<components:TopButtons id="sidebar" right="0" width="300" height="68"/>
		</s:HGroup>
	</s:Group>
	<component:EyeDropperScreenOverlay id="eyedropperScreenCap"/>
	<components:CCLoadingScreen includeIn="loading"/>

</s:Application>
