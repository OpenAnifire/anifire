<?xml version="1.0" encoding="utf-8"?>
<s:HGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:components="anifire.creator.components.*"
	verticalAlign="middle"
	horizontalAlign="center">

	<fx:Script>
		<![CDATA[
			import anifire.constant.CcLibConstant;
			import anifire.creator.core.CcConsole;
			import anifire.creator.events.CcComponentTypeChooserEvent;
			import anifire.creator.models.CcCharacter;
			import anifire.creator.models.CcComponentThumb;
			import anifire.creator.models.CcTheme;
			import anifire.util.UtilDict;
			import anifire.util.UtilHashArray;
			import spark.events.IndexChangeEvent;

			private static var TRANSITION:String = "easeOut";
			private static var CAN_BG:String = "bg";
			private static var CAN_CIRCLE:String = "circle";
			private static var CAN_CURRENTICON:String = "currentIcon";
			private static var CAN_ICONIMAGE:String = "iconImage";
			private static var CAN_ICONPREVIOUS:String = "iconPrevious";
			private static var CAN_ICONNEXT:String = "iconNext";
			private var components:Array;
			private var currentComponentIndex:int;
			private var STEP_BUTTONS:Object;
			private var _propChanged:Object;

			override protected function createChildren() : void
			{
				super.createChildren();
			}
			
			public function init(param1:CcTheme, param2:CcCharacter, param3:Boolean = true) : void
			{
				var _loc6_:Array = null;
				var _loc7_:String = null;
				var _loc8_:String = null;
				var _loc9_:Boolean = false;
				var _loc10_:UtilHashArray = null;
				var _loc11_:UtilHashArray = null;
				var _loc12_:int = 0;
				var _loc13_:Function = null;
				var _loc14_:Number = NaN;
				var _loc4_:Array = new Array();
				var _loc5_:* = param1.getBodyShapeNum() > 1;
				this.components = new Array();
				if(param2.bodyShape.getLibraryNum() == 0)
				{
					_loc6_ = CcLibConstant.COMPONENT_TYPE_CHOOSER_ORDERING_VER1;
				}
				else
				{
					_loc6_ = CcLibConstant.COMPONENT_TYPE_CHOOSER_ORDERING_VER2;
				}
				for(_loc7_ in this.typeList.source)
				{
					_loc8_ = String(this.typeList.source[_loc7_].label);
					_loc9_ = false;
					if(CcLibConstant.COMPONENT_TYPE_CHOOSER_COMPONENT_GROUP.indexOf(_loc8_) >= 0 || param1.getAvailableComponentTypes().indexOf(_loc8_) > -1)
					{
						if(_loc8_ == CcLibConstant.COMPONENT_TYPE_BODYSHAPE)
						{
							if(_loc5_ && CcLibConstant.BODYSHAPE_CHOOSABLE || CcLibConstant.CHOOSE_TAG_TYPE_SEX)
							{
								_loc9_ = true;
							}
						}
						else
						{
							if(!(_loc10_ = param2.bodyShape.getComponentThumbByType(_loc8_)))
							{
								_loc10_ = param1.getComponentThumbByType(_loc8_);
							}
							_loc11_ = new UtilHashArray();
							if(_loc10_)
							{
								_loc12_ = 0;
								while(_loc12_ < _loc10_.length)
								{
									if(CcComponentThumb(_loc10_.getValueByIndex(_loc12_)).enable)
									{
										if((_loc13_ = CcConsole.getCcConsole().configuration.defaultThumbFilter.filter)(CcComponentThumb(_loc10_.getValueByIndex(_loc12_))))
										{
											_loc11_.push(_loc10_.getKey(_loc12_),_loc10_.getValueByIndex(_loc12_));
										}
									}
									_loc12_++;
								}
							}
							else
							{
								_loc11_ = null;
							}
							if(CcLibConstant.COMPONENT_TYPE_CHOOSER_COMPONENT_GROUP.indexOf(_loc8_) >= 0)
							{
								_loc9_ = true;
							}
							else
							{
								_loc14_ = CcLibConstant.ALL_MULTIPLE_COMPONENT_TYPES.indexOf(_loc8_) > -1 ? 0 : 1;
								if(param1.getAvailableComponentTypes().indexOf(_loc8_) > -1 && _loc11_ && _loc11_.length > _loc14_)
								{
									_loc9_ = true;
								}
							}
						}
					}
					if(_loc9_ && _loc6_.indexOf(_loc8_) > -1)
					{
						this.components.push(_loc8_);
						_loc4_.push(this.typeList.source[_loc7_]);
					}
				}
				this.confirmTypeList.source = _loc4_;
				this.currentComponentIndex = 0;
				this.switchToComponentType(this.components[this.currentComponentIndex],param3);
			}
			
			override public function styleChanged(param1:String) : void
			{
				var _loc3_:String = null;
				var _loc4_:* = undefined;
				super.styleChanged(param1);
				var _loc2_:Array = ["percentWidth","navMarginRight"];
				if(param1 == null || _loc2_.indexOf(param1) >= 0)
				{
					for each(_loc3_ in _loc2_)
					{
						if((_loc4_ = getStyle(_loc3_)) != undefined)
						{
							this._propChanged[_loc3_] = _loc4_;
						}
					}
				}
			}
			
			private function prepare() : void
			{
			}
			
			public function switchToComponentType(param1:String = "", param2:Boolean = true) : void
			{
				this.currentComponentIndex = this.components.indexOf(param1);
				this.canQuickBar.selectedIndex = this.currentComponentIndex;
				if(this.components.indexOf(param1) == 0)
				{
					this.btnPrevious.enabled = false;
				}
				else
				{
					this.btnPrevious.enabled = true;
				}
				if(this.components.indexOf(param1) == this.components.length - 1)
				{
					this.btnNext.enabled = false;
				}
				else
				{
					this.btnNext.enabled = true;
				}
				if(param2)
				{
					this.tellEverybodyComponentTypeChosen(param1);
				}
			}
			
			private function tellEverybodyComponentTypeChosen(param1:String) : void
			{
				var _loc2_:CcComponentTypeChooserEvent = new CcComponentTypeChooserEvent(CcComponentTypeChooserEvent.COMPONENT_TYPE_CHOSEN,this);
				_loc2_.componentType = param1;
				this.dispatchEvent(_loc2_);
			}
			
			private function onBtnClick(param1:Event) : void
			{
				var _loc2_:int = 0;
				if(param1.currentTarget == this.btnPrevious)
				{
					_loc2_ = this.currentComponentIndex - 1;
				}
				else if(param1.currentTarget == this.btnNext)
				{
					_loc2_ = this.currentComponentIndex + 1;
				}
				if(_loc2_ < this.components.length)
				{
					this.switchToComponentType(this.components[_loc2_]);
				}
			}
			
			private function onButtonBarChange(param1:IndexChangeEvent) : void
			{
				var _loc3_:String = null;
				var _loc2_:int = int(param1.newIndex);
				if(_loc2_ >= 0)
				{
					_loc3_ = String(this.confirmTypeList.source[_loc2_].label);
					this.switchToComponentType(_loc3_);
				}
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayList id="typeList">
			<fx:Object label="componentGroupClothes" icon="@Embed('../images/componentIcons/upper.png')"/>
			<fx:Object label="GoUpper" icon="@Embed('../images/componentIcons/upper.png')"/>
			<fx:Object label="GoLower" icon="@Embed('../images/componentIcons/lower.png')"/>
			<fx:Object label="GoHands" icon="@Embed('../images/componentIcons/hand.png')"/>
			<fx:Object label="GoFeet" icon="@Embed('../images/componentIcons/shoes.png')"/>
			<fx:Object label="GoBehindBody" icon="@Embed('../images/componentIcons/back.png')"/>
			<fx:Object label="GoHair" icon="@Embed('../images/componentIcons/hair.png')"/>
			<fx:Object label="upper_body" icon="@Embed('../images/componentIcons/upper.png')"/>
			<fx:Object label="lower_body" icon="@Embed('../images/componentIcons/lower.png')"/>
			<fx:Object label="faceshape" icon="@Embed('../images/componentIcons/face.png')"/>
			<fx:Object label="hair" icon="@Embed('../images/componentIcons/hair.png')"/>
			<fx:Object label="beard" icon="@Embed('../images/componentIcons/beard.png')"/>
			<fx:Object label="mouth" icon="@Embed('../images/componentIcons/mouth.png')"/>
			<fx:Object label="ear" icon="@Embed('../images/componentIcons/ear.png')"/>
			<fx:Object label="mustache" icon="@Embed('../images/componentIcons/mustache.png')"/>
			<fx:Object label="eye" icon="@Embed('../images/componentIcons/eyes.png')"/>
			<fx:Object label="eyebrow" icon="@Embed('../images/componentIcons/eyebrows.png')"/>
			<fx:Object label="nose" icon="@Embed('../images/componentIcons/nose.png')"/>
			<fx:Object label="glasses" icon="@Embed('../images/componentIcons/glasses.png')"/>
			<fx:Object label="facedecoration" icon="@Embed('../images/componentIcons/faceDecorations.png')"/>			
		</s:ArrayList>
	</fx:Declarations>

	<components:IconButton
		id="btnPrevious"
		buttonMode="true"
		enabled="false"
		icon="@Embed('../images/componentIcons/lastStepIcon.png')"
		iconOver="@Embed('../images/componentIcons/lastStepIcon_hover.png')"
		iconDisabled="@Embed('../images/componentIcons/lastStepIcon_disabled.png')"
		label="{UtilDict.toDisplay('go','Previous')}"
		click="onBtnClick(event)"/>
	<s:Spacer width="18"/>
	<s:ButtonBar
		id="canQuickBar"
		x="0"
		height="45"
		visible="true"
		verticalCenter="0"
		requireSelection="true"
		skinClass="anifire.creator.skins.HButtonBarSkin"
		change="onButtonBarChange(event)">
		<s:dataProvider>
			<s:ArrayList id="confirmTypeList"/>
		</s:dataProvider>
	</s:ButtonBar>
	<s:Spacer width="18"/>
	<components:IconButton
		id="btnNext"
		buttonMode="true"
		enabled="false"
		icon="@Embed('../images/componentIcons/nextStepIcon.png')"
		iconOver="@Embed('../images/componentIcons/nextStepIcon_hover.png')"
		iconDisabled="@Embed('../images/componentIcons/nextStepIcon_disabled.png')"
		label="{UtilDict.toDisplay('go','Next')}"
		click="onBtnClick(event)"/>
</s:HGroup>
